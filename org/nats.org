# -*- mode: org; mode: auto-fill -*-
#+TITLE:   Basic Racket NATS Client
#+startup: showeverything
#+include: "readme.org"

*** Imports and Definitions

Import the json library and formatted strings which can be used to
implement the NATS protocol.

#+BEGIN_SRC racket :tangle nats.rkt
#lang racket

(require json)

(define version "0.0.1")

;; Protocol
(define CONNECT "CONNECT {\"verbose\":false,\"pedantic\":false}\r\n")
(define PING    "PING \r\n")              ;; Received periodically by the server
(define PONG    "PONG \r\n")              ;;
(define SUB     "SUB ~a ~a\r\n")          ;; SUB some.interest ssid
(define UNSUB   "UNSUB ~a ~a\r\n")        ;; UNSUB ssid max
(define PUB     "PUB ~a ~a ~a\r\n~a\r\n") ;; PUB some.interest optional-inbox message-bytes\r\n
                                          ;; content\r\n

;; Track number of subscriptions
(define ssid 1)

#+END_SRC

*** Functions

**** Helper functions
***** ~send-command~

#+BEGIN_SRC racket :tangle nats.rkt

(define (send-command cmd nats-out)
  (fprintf nats-out cmd)
  (flush-output nats-out))

#+END_SRC

***** ~process-nats-protocol~

#+BEGIN_SRC racket :tangle nats.rkt

(define (process-nats-protocol io callback)
  (let* ([nats-in  (car io)]
         [nats-out (cdr io)]
         [payload  (read-line nats-in)]
         [maybe-op (read (open-input-string payload))])

    (match maybe-op
      ['INFO   (process-info payload)]
      ['PING   (send-command PONG nats-out)]
      ['PONG   (send-command PING nats-out)]
      ['MSG    (process-msg   payload callback nats-in)]
      ['-ERR   'skip]
      ['+OK    'skip]
      [_       'skip])))

#+END_SRC

***** ~process-info~

#+BEGIN_SRC racket :tangle nats.rkt

(define (process-info payload)
  (let* ([info-pair  (string-split payload " ")]
         [info-op    (car info-pair)]
         [info-msg   (car (cdr info-pair))]
         [server-info (string->jsexpr info-msg)])

    (printf "Server Version: ~a ~nServer Id: ~a~n"
            (hash-ref server-info 'version)
            (hash-ref server-info 'server_id))))
#+END_SRC

***** ~process-msg~

#+BEGIN_SRC racket :tangle nats.rkt

(define (process-msg payload sub-callback nats-in)
  (let* ([lst (string-split payload " ")]
         [op       (string-trim (list-ref lst 0))] ;; removing whitespace
         [subject  (string-trim (list-ref lst 1))] ;; so that equality checks
         [csid     (string-trim (list-ref lst 2))] ;; and so that
         [msgbytes (string-trim (list-ref lst 3))] ;; msgbytes is casted to number correctly
         ;; Get the next line right away
         [content  (read-bytes (string->number msgbytes) nats-in)])

    ;; e.g. (nats-sub "hello.world" (lambda (msg) ... ))
    (sub-callback (list subject csid content))))
#+END_SRC

**** Exported functions
***** ~nats-connect~

By default it connects to the same port as the gnatsd image.

#+BEGIN_SRC racket :tangle nats.rkt

(define (nats-connect
         #:host [host "127.0.0.1"]
         #:port [port 4222])

  (define-values (nats-in nats-out) (tcp-connect host port))
  (send-command CONNECT nats-out)

  (printf "Connected to NATS server at ~a:~a~n" host port)
  (cons nats-in nats-out))

#+END_SRC

***** ~with-nats-io~

#+BEGIN_SRC racket :tangle nats.rkt

(define (with-nats-io nats-io callback)
  (define main-cust (make-custodian))
  (parameterize ([current-custodian main-cust])
    (define (loop)
      (process-nats-protocol nats-io callback)
      (loop))
    (thread-wait (thread loop))
    (lambda ()
      (printf "Shutting down...")
      (custodian-shutdown-all main-cust))))

#+END_SRC

***** ~nats-sub~

#+BEGIN_SRC racket :tangle nats.rkt

(define (nats-sub subject callback io)
  (define nats-in  (car io))
  (define nats-out (cdr io))
  (set! ssid (+ 1 ssid)) ;; start with ssid:2

  ;; send the subcription message
  (send-command (format SUB subject (number->string ssid)) nats-out)

  (with-nats-io io
    (lambda (msg) ;; a list
      (let* ([received-subject (list-ref msg 0)]
             [csid    (list-ref msg 1)]
             [content (list-ref msg 2)])

        (if (equal? received-subject subject)
            (callback content)
            'skip)))))

#+END_SRC

***** ~nats-pub~

#+BEGIN_SRC racket :tangle nats.rkt

(define (nats-pub subject content io)
  (define nats-in  (car io))
  (define nats-out (cdr io))
  (send-command
   (format PUB subject " " (string-length content) content) nats-out))

#+END_SRC

*** Provides

#+BEGIN_SRC racket :tangle nats.rkt

(provide nats-sub)
(provide nats-pub)
(provide nats-connect)
(provide with-nats-io)

#+END_SRC
*** Appendix: About the NATS protocol

Some notes on the NATS protocol below.
All messages should end with a carriage and new line =\r\n=.

***** =INFO=

As soon as the connection is established, the server will emit an info
message with more details itself:

: INFO {"server_id":"5ddec1db39fa9afe91a7f769011d3c2a","version":"0.5.8","host":"0.0.0.0","port":4222,"auth_required":false,"ssl_required":false,"max_payload":1048576} 

***** =PING= and =PONG=

After a certain time, the NATS server will begin to emit PING messages
that the client needs to =PONG= back, otherwise it will drop the connection.

***** =CONNECT=

When the sending a =CONNECT= op:

: CONNECT {"verbose":false,"pedantic":false}

...the server should respond with:

: +OK

***** =SUB=

 Describe the interest and the subscription ID.

 : SUB hello.world  2
 : SUB holaaaaaaaaaa  2

***** =UNSUB=

Used to report as unsubscribe on the subscription id:1 after 1.

: SUB foo 1
: UNSUB 1 1

This functionality is useful to be able to implement the request
pattern of subscribing to a topic, but unsubscribing after we got as
many as we wanted already.

***** =PUB=

Describe the interest, optional inbox in case it is a request and the
number of bytes that the message consists of.

: PUB hello.world _INBOX.1aacf856345d5d688f4499d95f 11
: all is good

In case there is no inbox, there is an extra space in between:

: PUB hello.world  64
: there you goooooooooooooooooooooooooooooooooooooooooooooooooooo

***** =MSG=

 The server will process the pub message and propagated as a ~MSG~ payload.

 : MSG hello.world 2 64
 : there you gooooooooooooooooooooooooooooooooooooooooooooooooooooo
